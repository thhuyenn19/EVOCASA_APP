package com.mobile.evocasa;

import android.os.Bundle;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FieldValue;
import com.google.firebase.firestore.FirebaseFirestore;
import com.mobile.adapters.WishProductAdapter;
import com.mobile.evocasa.profile.ProfileFragment;
import com.mobile.models.WishProduct;
import com.mobile.utils.FontUtils;
import com.mobile.utils.UserSessionManager;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class WishlistFragment extends Fragment {

    private RecyclerView recyclerView;
    private View view;

    private TextView btnAll, btnSale, btnLowStock, btnOutOfStock;
    private List<TextView> allTabs;

    private ImageView imgWishlistBack;

    private WishProductAdapter wishProductAdapter;
    private FirebaseFirestore db;
    private List<WishProduct> wishProductList;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        view = inflater.inflate(R.layout.fragment_wishlist, container, false);

        db = FirebaseFirestore.getInstance();

        // Kh·ªüi t·∫°o RecyclerView v√† Adapter
        RecyclerView recyclerViewWishProduct = view.findViewById(R.id.recyclerViewWishProduct);
        recyclerViewWishProduct.setLayoutManager(new GridLayoutManager(getContext(), 2));

        wishProductList = new ArrayList<>();
        wishProductAdapter = new WishProductAdapter(wishProductList, position -> {
            // Khi click v√†o s·∫£n ph·∫©m (ho·∫∑c icon y√™u th√≠ch), x√≥a s·∫£n ph·∫©m kh·ªèi RecyclerView
            wishProductList.remove(position);
            wishProductAdapter.notifyItemRemoved(position);

            // C·∫≠p nh·∫≠t Firestore n·∫øu c·∫ßn (x√≥a s·∫£n ph·∫©m kh·ªèi wishlist)
            String customerId = new UserSessionManager(getContext()).getUid(); // L·∫•y customerId t·ª´ session
            db.collection("wishlist").document(customerId)
                    .get()
                    .addOnSuccessListener(documentSnapshot -> {
                        if (documentSnapshot.exists()) {
                            // Gi·∫£ s·ª≠ b·∫°n l∆∞u tr·ªØ c√°c s·∫£n ph·∫©m tr·ª±c ti·∫øp, kh√¥ng ph·∫£i product_id
                            List<Map<String, Object>> products = (List<Map<String, Object>>) documentSnapshot.get("products");
                            // T√¨m s·∫£n ph·∫©m v√† x√≥a kh·ªèi danh s√°ch
                            if (products != null) {
                                products.remove(position); // X√≥a s·∫£n ph·∫©m t·ª´ danh s√°ch
                                db.collection("wishlist").document(customerId)
                                        .update("products", products) // C·∫≠p nh·∫≠t l·∫°i danh s√°ch s·∫£n ph·∫©m trong Firestore
                                        .addOnSuccessListener(aVoid -> {
                                            Log.d("Wishlist", "Product removed from wishlist in Firestore");
                                        })
                                        .addOnFailureListener(e -> {
                                            Log.e("Wishlist", "Error removing product from wishlist in Firestore", e);
                                        });
                            }
                        }
                    })
                    .addOnFailureListener(e -> {
                        Log.e("Wishlist", "Error fetching wishlist data", e);
                    });
        });

        recyclerViewWishProduct.setAdapter(wishProductAdapter);

        // G·ªçi h√†m load t·ª´ Firestore, m·∫∑c ƒë·ªãnh s·∫Ω l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
        loadWishProduct("all"); // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m

        // Set font cho c√°c textView
        TextView txtViewRcm = view.findViewById(R.id.txtViewRcm);
        FontUtils.setZboldFont(requireContext(), txtViewRcm);
        TextView txtTitle = view.findViewById(R.id.txtTitle);
        FontUtils.setZboldFont(requireContext(), txtTitle);
        TextView tvSortBy = view.findViewById(R.id.tvSortBy);
        FontUtils.setMediumFont(requireContext(), tvSortBy);

        // C√°c button l·ªçc
        btnAll = view.findViewById(R.id.btnAll);
        FontUtils.setMediumFont(requireContext(), btnAll);
        btnSale = view.findViewById(R.id.btnSale);
        FontUtils.setMediumFont(requireContext(), btnSale);
        btnLowStock = view.findViewById(R.id.btnLowStock);
        FontUtils.setMediumFont(requireContext(), btnLowStock);
        btnOutOfStock = view.findViewById(R.id.btnOutOfStock);
        FontUtils.setMediumFont(requireContext(), btnOutOfStock);

        // Danh s√°ch t·∫•t c·∫£ tab
        allTabs = Arrays.asList(btnAll, btnSale, btnLowStock, btnOutOfStock);

        // Ch·ªçn m·∫∑c ƒë·ªãnh tab All
        setActiveTab(btnAll);

        // G√°n s·ª± ki·ªán cho c√°c tab
        for (TextView tab : allTabs) {
            tab.setOnClickListener(v -> {
                setActiveTab(tab);
                // L·ªçc theo t·ª´ng lo·∫°i s·∫£n ph·∫©m
                if (tab == btnAll) {
                    loadWishProduct("all");
                } else if (tab == btnSale) {
                    loadWishProduct("sale");
                } else if (tab == btnLowStock) {
                    loadWishProduct("lowStock");
                } else if (tab == btnOutOfStock) {
                    loadWishProduct("outOfStock");
                }
            });
        }

        // G√°n s·ª± ki·ªán quay l·∫°i ProfileFragment
        imgWishlistBack = view.findViewById(R.id.imgWishlistBack);
        imgWishlistBack.setOnClickListener(v -> {
            requireActivity()
                    .getSupportFragmentManager()
                    .beginTransaction()
                    .replace(R.id.fragment_container, new ProfileFragment())
                    .addToBackStack(null)
                    .commit();
        });

        return view;
    }

    // Gi·∫£ l·∫≠p load s·∫£n ph·∫©m cho c√°c tab
    private void loadWishProduct(String filter) {
        wishProductList.clear(); // X√≥a s·∫£n ph·∫©m c≈©

        db.collection("Product")
                .get()
                .addOnSuccessListener(querySnapshots -> {
                    List<DocumentSnapshot> allDocs = querySnapshots.getDocuments();
                    Collections.shuffle(allDocs); // üîÄ random

                    List<WishProduct> filteredProducts = new ArrayList<>();
                    int limit = Math.min(6, allDocs.size()); // Hi·ªÉn th·ªã t·ªëi ƒëa 6 s·∫£n ph·∫©m

                    // L·ªçc s·∫£n ph·∫©m theo t·ª´ng tab
                    switch (filter) {
                        case "sale":
                            // Gi·∫£ l·∫≠p s·∫£n ph·∫©m sale (gi·∫£m gi√°)
                            for (int i = 0; i < 4; i++) { // Hi·ªÉn th·ªã 4 s·∫£n ph·∫©m gi·∫£ l·∫≠p gi·∫£m gi√°
                                WishProduct product = allDocs.get(i).toObject(WishProduct.class);
                                filteredProducts.add(product);
                            }
                            break;

                        case "lowStock":
                            // Gi·∫£ l·∫≠p s·∫£n ph·∫©m c√≤n √≠t trong kho
                            for (int i = 0; i < 3; i++) { // Hi·ªÉn th·ªã 3 s·∫£n ph·∫©m gi·∫£ l·∫≠p c√≤n √≠t trong kho
                                WishProduct product = allDocs.get(i).toObject(WishProduct.class);
                                filteredProducts.add(product);
                            }
                            break;

                        case "outOfStock":
                            // Gi·∫£ l·∫≠p s·∫£n ph·∫©m h·∫øt h√†ng
                            for (int i = 0; i < 2; i++) { // Hi·ªÉn th·ªã 2 s·∫£n ph·∫©m gi·∫£ l·∫≠p h·∫øt h√†ng
                                WishProduct product = allDocs.get(i).toObject(WishProduct.class);
                                filteredProducts.add(product);
                            }
                            break;

                        case "all":
                        default:
                            // Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m
                            for (int i = 0; i < 6; i++) { // Hi·ªÉn th·ªã 6 s·∫£n ph·∫©m gi·∫£ l·∫≠p
                                WishProduct product = allDocs.get(i).toObject(WishProduct.class);
                                filteredProducts.add(product);
                            }
                            break;
                    }

                    // C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o RecyclerView
                    wishProductList.addAll(filteredProducts);
                    wishProductAdapter.notifyDataSetChanged();
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "L·ªói khi load s·∫£n ph·∫©m", e);
                });
    }

    // Thay ƒë·ªïi background cho c√°c tab ƒë∆∞·ª£c ch·ªçn
    private void setActiveTab(TextView selectedTab) {
        for (TextView tab : allTabs) {
            if (tab == selectedTab) {
                tab.setBackgroundResource(R.drawable.filter_button_selector_choose);
            } else {
                tab.setBackgroundResource(R.drawable.filter_button_selector);
            }
        }
    }
}







//package com.mobile.evocasa;
//
//import android.os.Bundle;
//
//import androidx.fragment.app.Fragment;
//import androidx.recyclerview.widget.GridLayoutManager;
//import androidx.recyclerview.widget.RecyclerView;
//
//import android.util.Log;
//import android.view.LayoutInflater;
//import android.view.View;
//import android.view.ViewGroup;
//import android.widget.ImageView;
//import android.widget.TextView;
//
//import com.google.firebase.firestore.DocumentSnapshot;
//import com.google.firebase.firestore.FieldValue;
//import com.google.firebase.firestore.FirebaseFirestore;
//import com.mobile.adapters.HotProductsAdapter;
//import com.mobile.adapters.WishProductAdapter;
//import com.mobile.evocasa.profile.ProfileFragment;
//import com.mobile.models.HotProducts;
//import com.mobile.models.WishProduct;
//import com.mobile.utils.FontUtils;
//import com.mobile.utils.UserSessionManager;
//
//import java.util.ArrayList;
//import java.util.Arrays;
//import java.util.Collections;
//import java.util.List;
//import java.util.Map;
//
//
//public class WishlistFragment extends Fragment {
//
//    private RecyclerView recyclerView;
//    private View view;
//
//    private TextView btnAll, btnSale, btnLowStock, btnOutOfStock;
//    private List<TextView> allTabs;
//
//    private ImageView imgWishlistBack;
//
//    private WishProductAdapter wishProductAdapter;
//    private FirebaseFirestore db;
//    private List<Integer> imageList;
//    private List<WishProduct> wishProductList;
//
//
//    @Override
//    public View onCreateView(LayoutInflater inflater, ViewGroup container,
//                             Bundle savedInstanceState) {
//        // Inflate the layout for this fragment
//        view = inflater.inflate(R.layout.fragment_wishlist, container, false);
//
//        db = FirebaseFirestore.getInstance();
//
//        RecyclerView recyclerViewWishProduct = view.findViewById(R.id.recyclerViewWishProduct);
//        recyclerViewWishProduct.setLayoutManager(new GridLayoutManager(getContext(), 2));
//
//        wishProductList = new ArrayList<>();
//        wishProductAdapter = new WishProductAdapter(wishProductList, position -> {
//            // Khi click v√†o s·∫£n ph·∫©m (ho·∫∑c icon y√™u th√≠ch), x√≥a s·∫£n ph·∫©m kh·ªèi RecyclerView
//            wishProductList.remove(position);
//            wishProductAdapter.notifyItemRemoved(position);
//
//            // C·∫≠p nh·∫≠t Firestore n·∫øu c·∫ßn (x√≥a s·∫£n ph·∫©m kh·ªèi wishlist)
//            // ƒê√¢y l√† n∆°i b·∫°n c√≥ th·ªÉ x·ª≠ l√Ω Firestore n·∫øu b·∫°n l∆∞u s·∫£n ph·∫©m theo c√°ch kh√°c
//            String customerId = new UserSessionManager(getContext()).getUid(); // L·∫•y customerId t·ª´ session
//            db.collection("wishlist").document(customerId)
//                    .get()
//                    .addOnSuccessListener(documentSnapshot -> {
//                        if (documentSnapshot.exists()) {
//                            // Gi·∫£ s·ª≠ b·∫°n l∆∞u tr·ªØ c√°c s·∫£n ph·∫©m tr·ª±c ti·∫øp, kh√¥ng ph·∫£i product_id
//                            List<Map<String, Object>> products = (List<Map<String, Object>>) documentSnapshot.get("products");
//                            // T√¨m s·∫£n ph·∫©m v√† x√≥a kh·ªèi danh s√°ch
//                            if (products != null) {
//                                products.remove(position); // X√≥a s·∫£n ph·∫©m t·ª´ danh s√°ch
//                                db.collection("wishlist").document(customerId)
//                                        .update("products", products) // C·∫≠p nh·∫≠t l·∫°i danh s√°ch s·∫£n ph·∫©m trong Firestore
//                                        .addOnSuccessListener(aVoid -> {
//                                            Log.d("Wishlist", "Product removed from wishlist in Firestore");
//                                        })
//                                        .addOnFailureListener(e -> {
//                                            Log.e("Wishlist", "Error removing product from wishlist in Firestore", e);
//                                        });
//                            }
//                        }
//                    })
//                    .addOnFailureListener(e -> {
//                        Log.e("Wishlist", "Error fetching wishlist data", e);
//                    });
//        });
//
//        recyclerViewWishProduct.setAdapter(wishProductAdapter);
//
//        // G·ªçi h√†m load t·ª´ Firestore
//        loadWishProduct();
//
//
//        //set font//
//        TextView txtViewRcm = view.findViewById(R.id.txtViewRcm);
//        FontUtils.setZboldFont(requireContext(), txtViewRcm);
//
//        TextView txtTitle = view.findViewById(R.id.txtTitle);
//        FontUtils.setZboldFont(requireContext(), txtTitle);
//
//        TextView tvSortBy = view.findViewById(R.id.tvSortBy);
//        FontUtils.setMediumFont(requireContext(), tvSortBy);
//
//        TextView btnAll = view.findViewById(R.id.btnAll);
//        FontUtils.setMediumFont(requireContext(), btnAll);
//
//        TextView btnSale = view.findViewById(R.id.btnSale);
//        FontUtils.setMediumFont(requireContext(), btnSale);
//
//        TextView btnLowStock = view.findViewById(R.id.btnLowStock);
//        FontUtils.setMediumFont(requireContext(), btnLowStock);
//
//        TextView btnOutOfStock = view.findViewById(R.id.btnOutOfStock);
//        FontUtils.setMediumFont(requireContext(), btnOutOfStock);
//
//
//        //Ch·ªçn c√°c option l·ªçc
//        // Danh s√°ch t·∫•t c·∫£ tab
//        allTabs = Arrays.asList(btnAll, btnSale, btnLowStock, btnOutOfStock);
//
//        // Ch·ªçn m·∫∑c ƒë·ªãnh tab All
//        setActiveTab(btnAll);
//
//        // G√°n s·ª± ki·ªán cho c√°c tab
//        for (TextView tab : allTabs) {
//            tab.setOnClickListener(v -> {
//                setActiveTab(tab);
//                // TODO: x·ª≠ l√Ω l·ªçc s·∫£n ph·∫©m t∆∞∆°ng ·ª©ng t·∫°i ƒë√¢y n·∫øu c·∫ßn
//            });
//        }
//
//        // G√°n s·ª± ki·ªán quay l·∫°i ProfileFragment
//        imgWishlistBack = view.findViewById(R.id.imgWishlistBack);
//        imgWishlistBack.setOnClickListener(v -> {
//            requireActivity()
//                    .getSupportFragmentManager()
//                    .beginTransaction()
//                    .replace(R.id.fragment_container, new ProfileFragment())
//                    .addToBackStack(null)
//                    .commit();
//        });
//
//        return view;
//    }
//
//    private void loadWishProduct() {
//        db.collection("Product")
//                .get()
//                .addOnSuccessListener(querySnapshots -> {
//                    wishProductList.clear();
//
//                    List<DocumentSnapshot> allDocs = querySnapshots.getDocuments();
//                    Collections.shuffle(allDocs); // üîÄ random
//
//                    int limit = Math.min(6, allDocs.size()); // l·∫•y 6 s·∫£n ph·∫©m
//                    for (int i = 0; i < limit; i++) {
//                        WishProduct product = allDocs.get(i).toObject(WishProduct.class);
//                        wishProductList.add(product);
//                    }
//
//                    wishProductAdapter.notifyDataSetChanged();
//                })
//                .addOnFailureListener(e -> {
//                    Log.e("Firestore", "L·ªói khi load Hot Products", e);
//                });
//    }
//
//    private void setActiveTab(TextView selectedTab) {
//        for (TextView tab : allTabs) {
//            if (tab == selectedTab) {
//                tab.setBackgroundResource(R.drawable.filter_button_selector_choose);
//            } else {
//                tab.setBackgroundResource(R.drawable.filter_button_selector);
//            }
//        }
//    }
//}










//B√ÄI C≈®
//package com.mobile.evocasa;
//
//import android.os.Bundle;
//
//import androidx.fragment.app.Fragment;
//import androidx.recyclerview.widget.GridLayoutManager;
//import androidx.recyclerview.widget.RecyclerView;
//
//import android.view.LayoutInflater;
//import android.view.View;
//import android.view.ViewGroup;
//import android.widget.ImageView;
//import android.widget.TextView;
//
//import com.mobile.adapters.SuggestedProductAdapter;
//import com.mobile.adapters.WishProductAdapter;
//import com.mobile.evocasa.profile.ProfileFragment;
//import com.mobile.models.SuggestedProducts;
//import com.mobile.models.WishProduct;
//import com.mobile.utils.FontUtils;
//
//import java.util.ArrayList;
//import java.util.Arrays;
//import java.util.List;
//
//
//public class WishlistFragment extends Fragment {
//
//    private RecyclerView recyclerView;
//    private View view;
//
//    private TextView btnAll, btnSale, btnLowStock, btnOutOfStock;
//    private List<TextView> allTabs;
//
//    private ImageView imgWishlistBack;
//
//    private WishProductAdapter adapter;
//
//
//    @Override
//    public View onCreateView(LayoutInflater inflater, ViewGroup container,
//                             Bundle savedInstanceState) {
//        // Inflate the layout for this fragment
//        view = inflater.inflate(R.layout.fragment_wishlist, container, false);
//
//
//        /* Favourite */
//        RecyclerView recyclerViewWishProduct = view.findViewById(R.id.recyclerViewWishProduct);
//        recyclerViewWishProduct.setLayoutManager(new GridLayoutManager(getContext(), 2));
//        List<WishProduct> wishProductList = new ArrayList<>();
//        wishProductList.add(new WishProduct(R.mipmap.ic_furniture_tevechairs, "Teve Chairs", "$109", "$69", "-37%", 4.8f));
//        wishProductList.add(new WishProduct(R.mipmap.ic_furniture_tevechairs, "Teve Chairs", "$109", "$69", "-37%", 4.8f));
//        wishProductList.add(new WishProduct(R.mipmap.ic_furniture_tevechairs, "Teve Chairs", "$109", "$69", "-37%", 4.8f));
//        wishProductList.add(new WishProduct(R.mipmap.ic_furniture_tevechairs, "Teve Chairs", "$109", "$69", "-37%", 4.8f));
//        wishProductList.add(new WishProduct(R.mipmap.ic_furniture_tevechairs, "Teve Chairs", "$109", "$69", "-37%", 4.8f));
//        wishProductList.add(new WishProduct(R.mipmap.ic_furniture_tevechairs, "Teve Chairs", "$109", "$69", "-37%", 4.8f));
//        // G√°n adapter
//        WishProductAdapter wishProductAdapter = new WishProductAdapter(wishProductList);
//        recyclerViewWishProduct.setAdapter(wishProductAdapter);
//
//
//
//
//
////        /* Suggest */
////        RecyclerView recyclerViewSuggestedProducts = view.findViewById(R.id.recyclerViewSuggestedProducts);
////        recyclerViewSuggestedProducts.setLayoutManager(new GridLayoutManager(getContext(), 2));
////        List<SuggestedProducts> suggestedProductsList = new ArrayList<>();
////        suggestedProductsList.add(new SuggestedProducts(R.mipmap.ic_lighting_brasslamp, "MCM Brass Lamp", "$109", "$85", "-22%", 5.0f));
////        suggestedProductsList.add(new SuggestedProducts(R.mipmap.ic_lighting_brasslamp, "MCM Brass Lamp", "$109", "$85", "-22%", 5.0f));
////        suggestedProductsList.add(new SuggestedProducts(R.mipmap.ic_lighting_brasslamp, "MCM Brass Lamp", "$109", "$85", "-22%", 5.0f));
////        suggestedProductsList.add(new SuggestedProducts(R.mipmap.ic_lighting_brasslamp, "MCM Brass Lamp", "$109", "$85", "-22%", 5.0f));
////        // G√°n adapter cho RecyclerView
////        SuggestedProductAdapter suggestedProductsAdapter = new SuggestedProductAdapter(suggestedProductsList);
////        recyclerViewSuggestedProducts.setAdapter(suggestedProductsAdapter);
//
//
//
//
//        //set font//
//        TextView txtViewRcm = view.findViewById(R.id.txtViewRcm);
//        FontUtils.setZboldFont(requireContext(), txtViewRcm);
//
//        TextView txtTitle = view.findViewById(R.id.txtTitle);
//        FontUtils.setZboldFont(requireContext(), txtTitle);
//
//        TextView tvSortBy = view.findViewById(R.id.tvSortBy);
//        FontUtils.setMediumFont(requireContext(), tvSortBy);
//
//        TextView btnAll = view.findViewById(R.id.btnAll);
//        FontUtils.setMediumFont(requireContext(), btnAll);
//
//        TextView btnSale = view.findViewById(R.id.btnSale);
//        FontUtils.setMediumFont(requireContext(), btnSale);
//
//        TextView btnLowStock = view.findViewById(R.id.btnLowStock);
//        FontUtils.setMediumFont(requireContext(), btnLowStock);
//
//        TextView btnOutOfStock = view.findViewById(R.id.btnOutOfStock);
//        FontUtils.setMediumFont(requireContext(), btnOutOfStock);
//
//
//        //Ch·ªçn c√°c option l·ªçc
//        // Danh s√°ch t·∫•t c·∫£ tab
//        allTabs = Arrays.asList(btnAll, btnSale, btnLowStock, btnOutOfStock);
//
//        // Ch·ªçn m·∫∑c ƒë·ªãnh tab All
//        setActiveTab(btnAll);
//
//        // G√°n s·ª± ki·ªán cho c√°c tab
//        for (TextView tab : allTabs) {
//            tab.setOnClickListener(v -> {
//                setActiveTab(tab);
//                // TODO: x·ª≠ l√Ω l·ªçc s·∫£n ph·∫©m t∆∞∆°ng ·ª©ng t·∫°i ƒë√¢y n·∫øu c·∫ßn
//            });
//        }
//
//        // G√°n s·ª± ki·ªán quay l·∫°i ProfileFragment
//        imgWishlistBack = view.findViewById(R.id.imgWishlistBack);
//        imgWishlistBack.setOnClickListener(v -> {
//            requireActivity()
//                    .getSupportFragmentManager()
//                    .beginTransaction()
//                    .replace(R.id.fragment_container, new ProfileFragment())
//                    .addToBackStack(null)
//                    .commit();
//        });
//
//        return view;
//    }
//
//    private void setActiveTab(TextView selectedTab) {
//        for (TextView tab : allTabs) {
//            if (tab == selectedTab) {
//                tab.setBackgroundResource(R.drawable.filter_button_selector_choose);
//            } else {
//                tab.setBackgroundResource(R.drawable.filter_button_selector);
//            }
//        }
//    }
//}